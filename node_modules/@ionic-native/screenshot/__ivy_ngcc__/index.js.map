{"version":3,"file":"index.js","sources":["../../../src/@ionic-native/plugins/screenshot/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AAC/D;AACG;AAAoB;AAIhB;AAAU;AAAiB;AAGR;AAAG;AAEV;AAAG;AAAO;AAAG;AAIvB;AACwC;AAAG;AAEjC;AACE;AAAO;AAAI;AAG1B,IAQ0B,8BAAiB;AAAC;AAG/B;AAEyB;AAAM,IAHhD;AACF;AACE;AACE;AACE;AACE;AACE;AACE;AACE;AAEJ,OADL;AACL;AAAQ;AAA+C;AAAS;AAGpD;AACa;AAGnB;AAEL;AAIY;AAIZ;AAGD,IApBE,yBAAI;AAAO;AAA+C;AAAS;AAGpD;AACa;AAGnB;AAEL;AAIY;AAMjB;AACI,IApBH,UAAK,MAAe,EAAE,OAAgB,EAAE,QAAiB;AAAI,QAC3D,MAAM,CAAC,IAAI,OAAO,CAChB,UAAC,OAAO,EAAE,MAAM;AAAI,YAClB,SAAS,CAAC,UAAU,CAAC,IAAI,CACvB,UAAC,KAAU,EAAE,MAAW;AAAI,gBAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACxB,oBAAc,MAAM,CAAC,KAAK,CAAC,CAAC;AAC5B,iBAAa;AAAC,gBAAA,IAAI,CAAC,CAAC;AACpB,oBAAc,OAAO,CAAC,MAAM,CAAC,CAAC;AAC9B,iBAAa;AACb,aAAW,EACD,MAAM,EACN,OAAO,EACP,QAAQ,CACT,CAAC;AACV,SAAO,CACF,CAAC;AACN,KAAG;AAEH,IAAE;AACF;AACE;AACE;AACE;AACE;AAEJ,OADC;AACL;AAAQ;AACmB;AACpB;AAEY;AAEnB;AACI;AAAU,IAPZ,wBAAG;AAAO;AAEV;AAAS;AAEY;AAEnB;AACI;AAAU,IAPhB,UAAI,OAAgB;AAAI,QACtB,MAAM,CAAC,IAAI,OAAO,CAChB,UAAC,OAAO,EAAE,MAAM;AAAI,YAClB,SAAS,CAAC,UAAU,CAAC,GAAG,CACtB,UAAC,KAAU,EAAE,MAAW;AAAI,gBAC1B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;AACxB,oBAAc,MAAM,CAAC,KAAK,CAAC,CAAC;AAC5B,iBAAa;AAAC,gBAAA,IAAI,CAAC,CAAC;AACpB,oBAAc,OAAO,CAAC,MAAM,CAAC,CAAC;AAC9B,iBAAa;AACb,aAAW,EACD,OAAO,CACR,CAAC;AACV,SAAO,CACF,CAAC;AACN,KAAG,CArDI;AAAC;AAAQ;cADf,UAAU,xBAC6B;AAGhB;AAAc;AAE3B;AAA8D;AACxE;AACW;AAAO;AAAW;AAAO;AAC3B;AAC0C;AAAO;AAGpD;AAAyD;AAAW;AACrE,IAbO,UAAU;AAAgB,QARtC,MAAM,CAAC;AACR,YAAE,UAAU,EAAE,YAAY;AAC1B,YAAE,MAAM,EAAE,mCAAmC;AAC7C,YAAE,SAAS,EAAE,sBAAsB;AACnC,YAAE,IAAI,EAAE,gDAAgD;AACxD,YAAE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC;AACxC,SAAC,CAAC;AACF,OACa,UAAU;;;;;0BAsDtB;AACD,qBAtFA;AAAE,EA+B8B,iBAAiB;AAEjD,SAFa,UAAU;AAAI","sourcesContent":["import { Injectable } from '@angular/core';\nimport { IonicNativePlugin, Plugin } from '@ionic-native/core';\n\ndeclare const navigator: any;\n\n/**\n * @name Screenshot\n * @description Captures a screen shot\n * @usage\n * ```typescript\n * import { Screenshot } from '@ionic-native/screenshot';\n *\n * constructor(private screenshot: Screenshot) { }\n *\n * ...\n *\n * // Take a screenshot and save to file\n * this.screenshot.save('jpg', 80, 'myscreenshot.jpg').then(onSuccess, onError);\n *\n * // Take a screenshot and get temporary file URI\n * this.screenshot.URI(80).then(onSuccess, onError);\n * ```\n */\n@Plugin({\n  pluginName: 'Screenshot',\n  plugin: 'com.darktalker.cordova.screenshot',\n  pluginRef: 'navigator.screenshot',\n  repo: 'https://github.com/gitawego/cordova-screenshot',\n  platforms: ['Android', 'iOS', 'macOS']\n})\n@Injectable()\nexport class Screenshot extends IonicNativePlugin {\n\n  /**\n   *  Takes screenshot and saves the image\n   *\n   * @param format {string} Format can take the value of either 'jpg' or 'png'\n   * On ios, only 'jpg' format is supported\n   * @param quality {number}  Determines the quality of the screenshot.\n   *        Default quality is set to 100.\n   * @param filename {string} Name of the file as stored on the storage\n   * @returns {Promise<any>}\n   */\n  save(format?: string, quality?: number, filename?: string): Promise<any> {\n    return new Promise<any>(\n      (resolve, reject) => {\n        navigator.screenshot.save(\n          (error: any, result: any) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve(result);\n            }\n          },\n          format,\n          quality,\n          filename\n        );\n      }\n    );\n  }\n\n  /**\n   *  Takes screenshot and returns the image as an URI\n   *\n   * @param quality {number} Determines the quality of the screenshot.\n   *        Default quality is set to 100.\n   * @returns {Promise<any>}\n   */\n  URI(quality?: number): Promise<any> {\n    return new Promise<any>(\n      (resolve, reject) => {\n        navigator.screenshot.URI(\n          (error: any, result: any) => {\n            if (error) {\n              reject(error);\n            } else {\n              resolve(result);\n            }\n          },\n          quality\n        );\n      }\n    );\n  }\n}\n"]}